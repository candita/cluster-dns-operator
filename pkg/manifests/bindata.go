// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (492B)
// assets/dns/daemonset.yaml (3.237kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (713B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (393B)
// assets/node-resolver/service-account.yaml (95B)
// assets/node-resolver/update-node-resolver.sh (2.599kB)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x85\x90\x3d\xfe\xf1\x6f\x85\xd7\x0e\xdd\x3b\x74\xa7\xa5\x2b\xcc\xda\x11\x05\x92\x72\xd0\x3e\x7d\xe1\xd8\x43\x11\xa3\x01\xba\xdd\x1d\xa4\xfb\x88\x9b\xb8\xe4\x3e\x3e\xcf\xcd\x1c\xfa\x2a\x33\x02\x55\x7e\x83\x1a\x4b\xe9\xa3\x0e\x94\x3a\x6a\x3e\x8a\xf2\x17\x39\x4b\xe9\xa6\x27\xeb\x58\xfe\x2d\xff\xc3\x05\x4e\x99\x9c\xfa\x10\x63\xa1\x0b\xfa\x28\x15\xc5\x46\x7e\xf7\x73\x2e\x16\xb4\xcd\xb0\x3e\x9c\x23\x55\x7e\x51\x69\xd5\xd6\x97\xe7\x78\x3a\x85\x18\x15\x26\x4d\x13\xf6\x0c\x25\x57\xe1\xe2\x76\x73\x06\x5d\x38\x61\x33\x55\xf2\x26\x56\x86\x55\xda\xf2\x05\x3a\xec\x7f\x67\x36\xbf\x89\x2b\x79\x1a\xc3\x11\x98\xd9\x92\x2c\xd0\xcf\xfd\xf8\x07\xf8\x99\xff\x5e\xbf\xee\x83\xe2\x9c\x7e\x0e\x74\x64\xb8\x4c\x28\x8a\x85\x71\xbd\x23\x24\x05\x39\x7e\x69\xbe\x5f\xfe\x58\x6c\x6d\xf8\x40\x72\x4a\x09\x66\x8f\x00\xdf\x01\x00\x00\xff\xff\xa8\x4a\xa0\x25\xec\x01\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 492, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0x60, 0xec, 0x48, 0xf0, 0xad, 0x2c, 0x47, 0x8d, 0xc7, 0x61, 0xc0, 0x24, 0x2c, 0x57, 0x4e, 0xcc, 0x57, 0x7b, 0x45, 0x8c, 0xcf, 0x81, 0xf7, 0xf7, 0xf5, 0xe0, 0x6e, 0x26, 0x7, 0xef, 0xd6}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdd\x6f\xdb\x46\x0c\x7f\xf7\x5f\xc1\x39\x18\xb2\x01\x95\x3f\x9a\xa6\x4d\x05\xe4\x21\xb3\xb3\xa6\x40\xd3\x1a\xb5\xbb\x3d\x0c\x43\x40\x9f\x68\xeb\x90\xd3\x9d\x46\x52\x4e\xb4\x61\xff\xfb\x70\x72\x6c\xcb\x49\x9a\x7e\xec\x25\xb1\x8e\xe4\xef\xc8\xdf\xf1\xeb\xda\xfa\x2c\x85\x31\x52\x11\xfc\x94\xb4\x83\xa5\xfd\x8d\x58\x6c\xf0\x29\x60\x59\x4a\x7f\x35\xec\x1c\x80\xc7\x82\x9e\x35\x7f\xa5\x44\x43\x80\x3e\x03\x87\x73\x72\x02\xc8\x04\x42\x0a\xa8\xc0\x95\x57\x5b\x50\x47\x4a\x32\x69\x07\xe0\x00\x0a\xeb\x3f\x12\x66\xf5\x94\x4c\xf0\x99\x80\xe4\xa1\x72\x19\xcc\x09\x8e\x6e\x41\x73\x02\x26\xcc\xac\x27\x11\x28\x39\xcc\xe9\x50\xa0\x0c\xce\x59\xbf\x04\xeb\x95\x78\x85\x0e\x7e\xb2\x3d\xea\x41\x49\x6c\x43\x76\x87\xf3\x73\xaf\x03\xf7\xb1\x53\x78\xdd\x01\x50\x2a\x4a\x87\x4a\xf1\x7a\x80\x82\x14\x33\x54\x5c\x7f\x01\xa0\xf7\x41\x51\x6d\xf0\xb2\x39\x02\x50\xe4\x25\x69\xef\x26\xf0\xb5\x0b\x98\xf5\x42\x49\x5e\x72\xbb\xd0\x9e\x0d\xfd\x02\x3d\x2e\xa9\x20\xaf\x29\x1c\xfe\xd3\xa5\xc5\x82\x8c\x76\x53\xe8\x4e\x98\x16\xc4\x4c\xd9\xb8\x62\xeb\x97\x53\x93\x53\x56\x45\xc7\xbb\xff\x1e\x36\xd0\x1b\x12\x9a\xdf\xc4\x2b\x6b\xe8\xcc\x98\x50\x79\x7d\x8f\x05\xa5\x90\x79\xb9\x93\x96\x6c\x03\x5b\xad\x47\x0e\x45\xd6\x42\xa9\x45\xa9\x48\x7c\xc8\x28\x31\x6c\xd5\x1a\x74\x77\xda\x26\x78\x45\xeb\x89\xb7\x21\x24\xcd\xc3\xb4\x11\x23\xf5\xb6\xc0\x25\x81\x95\xfb\x8f\xb3\xd1\x68\xe4\x93\xca\xb9\x49\x70\xd6\xd4\x29\xbc\x5d\xbc\x0f\x3a\x61\x12\xf2\xba\x23\x87\xb8\xb0\xbe\xa1\xec\x92\x44\xa2\xc9\x9d\xfa\xaf\xe8\xdc\x1c\xcd\xf5\x2c\xbc\x0b\x4b\xf9\xe0\xcf\x99\x03\x6f\xed\x4c\x28\x0a\x8c\x99\xf5\x07\x74\x4d\x60\xca\xbc\x74\xe1\xcf\xad\x18\x79\x29\x8d\x2c\x31\xc1\x2f\xba\xcf\xa0\xdb\x27\x35\xfd\x3b\xcd\xfe\x28\x30\x2d\xac\xa3\xb6\xc9\x2a\xb8\xaa\xa0\xcb\x48\x60\xeb\xf1\x36\xb1\x47\x18\xbb\x4c\xd6\x4a\x5b\x29\x40\x11\xf5\x27\xa8\x79\x0a\xed\x1b\x5a\x1a\x31\x03\x3f\x78\x57\xa7\xa0\x5c\xed\x4c\xcb\xc0\xfb\xf7\x6c\x79\x9f\x04\xd6\x14\x8e\x8f\x8e\x8f\x5a\x28\x0f\x5f\x20\xbe\x6b\xd0\x60\x82\x4b\xe1\xd3\x78\xf2\xed\x48\x89\x9a\xf2\x51\xb4\xd9\x68\x87\xb6\xad\x9f\x49\x2c\x9f\xb4\xa5\x9f\xab\x96\x6f\x48\xdb\x47\x00\xe5\x9a\x89\x68\x55\xef\x0b\x1a\x57\x4e\x86\x27\xc3\xbd\x63\x31\x39\x45\x77\x2e\x66\xb3\x49\x4b\x60\xbd\x55\x8b\x6e\x4c\x0e\x77\xe5\x37\x1c\xb4\xbd\x6d\x97\x6b\x0a\x47\x70\x00\x9f\xca\x0c\x95\x9a\xaa\xcf\x9a\x76\x23\xa4\x87\xd2\xd4\x49\xef\x7e\x9f\xc0\x79\x58\x11\xd8\x05\xd4\xa1\x02\x93\xa3\x5f\x46\x43\x2b\xb0\x42\x57\xd1\x0f\xad\x8b\xa4\x32\x86\x44\x66\x39\x93\xe4\xc1\x65\x29\xb4\x23\x58\xa0\x75\x15\x53\x4b\xda\xa6\x3a\xd6\x43\xa8\x74\xe7\xe5\x56\xe6\xec\x8a\xbe\x99\xd5\x9c\xd0\x69\xfe\x18\xad\x83\x93\xc1\x77\xd3\xfa\x72\xf0\x84\xc7\xc7\xff\x83\x89\xe3\x56\x12\x49\xa8\xd8\x90\xa4\x7b\x75\xf1\x57\x45\xa2\xb2\x1f\xaa\x29\xab\x14\x8e\x07\xc5\xde\x61\x41\x45\xe0\x3a\x85\x57\x83\x4b\x7b\xaf\x27\x5d\x57\x73\x4a\x78\x8e\x26\x29\x39\xdc\xd6\xdf\xd0\x9f\x9a\x16\xd1\xaa\x9a\x24\x71\x61\xa9\x41\x34\x23\xe6\xbd\x73\x21\x53\x31\x25\xce\x8a\x92\x4f\x30\xcb\x98\x44\x4e\xd3\xd7\xc3\xe3\x17\x7b\x7a\xea\x24\x31\xb6\xcc\x89\x13\xa9\xac\x92\x9c\xce\xde\x4d\xaf\xce\x47\xe3\x8b\xf3\xab\x8f\xd3\xb3\xab\xdf\xdf\xce\x2e\xae\xce\xce\xa7\x57\xc3\xe7\x27\x57\x6f\x46\x97\x57\xd3\x8b\xb3\xe7\xc7\x2f\x9f\xed\xb4\xce\x47\xe3\x2f\xe8\x3d\xc0\x19\xfd\x32\xfa\x2a\x9c\x47\xf5\x9e\x40\xdb\x8b\xac\x2a\x45\x99\xb0\x38\x8d\xe9\x99\xf6\xfb\xc3\xe7\xaf\x7a\x83\xde\xa0\x37\x8c\x24\x1c\xf5\x1f\xb2\x40\xac\x49\x6c\xb0\xa7\x4d\x53\x54\x27\xfd\x92\xed\x0a\x95\xe2\xef\x9e\x61\x7d\x60\x72\x27\x4f\xae\xa9\x7e\xc2\xf2\x9a\xea\xaf\xee\xa0\x7b\xef\xb3\xe9\x7b\x05\x29\x5b\x23\xdf\x9d\x9a\xc3\xcf\xa4\xe6\x8b\x5d\x6a\x7e\x7e\x94\xdc\x1f\x16\xad\xe8\x3e\xe7\x68\xe4\xe6\x4b\xc3\x24\xf3\xb2\x19\x9a\x63\x5a\x60\xe5\x36\xec\x1e\x40\x1c\xf0\x53\x72\x64\x34\xf0\xc3\x5a\xe8\x75\xda\xfe\x3e\x98\xf7\x8f\xcf\xbc\xf5\xe9\x25\x96\x69\xab\xd8\xe2\x56\xf1\x44\xad\x01\x58\xa5\x62\x8f\xcf\x04\xae\xa9\x4e\x61\x33\x89\x1f\xe9\x77\xf7\x44\xc9\x13\xc4\x1c\x80\x90\x61\xd2\x27\xdd\x38\x00\x0d\x8e\x78\xbd\x9e\x3d\x4e\x46\xd5\x8c\x90\xa9\x32\x2a\x2d\xeb\xb5\xbb\x5a\x97\x94\xc2\xc7\xf5\xd6\xb8\x9e\x31\xcd\x39\xb7\x4f\xd2\xed\x1d\x53\x52\x28\xf0\x76\x5a\x71\x1c\x29\x01\x10\xca\x20\x56\xed\x8a\xd6\xb3\x05\x24\x80\xe6\xa8\x40\x68\xf2\xe6\x7d\xd6\x9f\x39\x4a\xa3\x9b\x6d\x91\x62\x3a\x5b\x5f\x91\x44\x98\x1c\x57\x04\x08\x2e\x18\x74\x4d\x16\xd4\x51\x17\xb2\x66\x39\x04\xdc\x78\x73\x17\x41\x0f\x60\x16\xa7\x99\x95\x2d\x9a\x2d\x62\xbd\xa0\x57\x58\x04\x06\x0d\x65\x70\x61\x59\x27\x78\x13\xf7\xeb\xdc\x7a\x15\x40\x81\x1b\x72\x2e\xfe\x8f\x3a\x62\x0b\xeb\x90\xc1\x85\xa5\x35\x60\xfd\x16\x6a\xbb\xc0\x26\x92\xf9\x66\x55\x0f\x2b\x9f\xc4\x4e\xcc\x9e\x34\xfa\x1b\x03\x2a\x9b\x05\xb6\x71\xbe\x92\xfb\xbe\x8f\xdf\x4f\xb7\x70\x31\x8e\x9b\x9c\x3c\xad\x88\x21\x78\x02\xba\xb5\xa2\xb2\x49\xce\x0d\x99\xb1\xf6\x7e\xdc\x1a\x15\x78\xfb\xc9\xe3\x0a\xad\xc3\xb9\x23\x28\x2a\xd1\xb8\xf5\xff\x4d\x1c\x1a\xb0\xdd\x1b\x58\x01\x1f\x7c\x14\xb4\x10\x5b\xb6\x29\x0c\x3a\xff\x05\x00\x00\xff\xff\x3c\x52\x4e\xaa\xa5\x0c\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 3237, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x61, 0x15, 0xbc, 0x49, 0x9c, 0x58, 0x9b, 0x8b, 0xfe, 0x3, 0x71, 0x8f, 0x52, 0x11, 0x9e, 0xd8, 0x7, 0x1, 0x37, 0x6c, 0x2c, 0x86, 0x79, 0xc2, 0x9, 0xe, 0x5c, 0x7e, 0x2a, 0xa8, 0x63}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x51\xbd\xd2\xd2\x50\x10\xed\x79\x8a\x33\xb1\xfd\x40\x6d\xf3\x06\x16\xda\x38\x63\xbf\xe4\x1e\x60\xe5\x66\x37\x73\x77\x13\xc6\xb7\x77\x02\xe8\x07\x43\xe1\x58\x26\x7b\xfe\xef\x59\xad\xf4\xf8\x26\x23\x63\x92\x81\x1b\x99\xf4\x07\x5b\xa8\x5b\x8f\xe5\xf3\x66\x64\x4a\x91\x94\x7e\x03\x88\x99\xa7\xa4\xba\xc5\xfa\x09\xf8\x44\x8b\x93\x1e\x72\xa7\xfe\xd1\xbc\x70\x1b\xac\x1c\xd2\x5b\x8f\xae\xbb\x42\x2e\xde\xce\xd5\xa5\xec\x9e\xb0\x52\xab\x5f\x58\x7a\x74\xa3\x98\x1c\x39\xd2\x72\xc5\x9b\x8c\xec\xdf\x65\xb7\xc5\x62\x03\x54\xd9\xb3\xde\x2d\x3f\x20\x98\x58\xa4\xce\x44\x3a\x64\x71\x2d\x28\x9c\x68\x45\xed\x08\x37\x9c\xe7\x3d\x21\x65\xd4\x58\x4b\x20\x4f\x92\x77\x40\xac\xe7\xbf\xe2\x90\x49\xe3\xb5\x46\x9b\x6d\x5b\xb9\xb0\xf6\xe8\x3e\x75\x77\xcf\x6b\xde\x87\x5c\xa3\x9b\xa6\xb7\xd5\x31\x1d\xd5\xfd\x8c\x83\x37\x7c\x67\x5b\x74\xe0\xd7\xdb\x15\xbe\xff\xc9\x21\x03\xba\xa6\xd0\xb8\xb6\xbb\x8d\xfc\xe2\x3a\xd4\x39\x92\xed\x41\xb8\x47\x97\x6d\xe6\x73\x82\xeb\xc6\x8d\xe1\x75\x61\x43\x11\x8e\x6e\xeb\x1e\xe9\x98\x24\x02\x7b\x09\x56\x35\x62\xf2\x82\xe0\x30\x37\xcd\x5f\xef\x63\xec\xee\x62\x5f\x12\x73\x30\x70\xf2\x48\x18\x73\x7d\x24\xb5\xe3\xdb\xed\xc7\x24\x79\xc2\xe2\x75\x1e\x19\x6f\x10\x2b\xd0\x80\x60\x6a\xba\x68\xe5\x91\xe5\x26\x33\x79\xd9\xfe\xb1\xd8\xad\xa3\x37\x63\x32\xd6\x36\xb4\x83\xb7\x81\xfd\x03\xe7\x5f\x14\x99\x8b\xe6\xff\x10\x2e\xd2\xec\x09\xff\x3b\x00\x00\xff\xff\x32\x31\x6a\x26\xc9\x02\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 713, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x10, 0x2c, 0xc1, 0x8, 0x39, 0x7c, 0xf5, 0x5, 0x6, 0x5d, 0x3e, 0xc1, 0x41, 0x2e, 0xa6, 0x25, 0x14, 0x59, 0xa3, 0x20, 0x7c, 0xf2, 0xad, 0xa6, 0xd5, 0x64, 0xd8, 0x12, 0xc4, 0x1b, 0x9f}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\xbd\x6a\x2b\x31\x10\xc5\xf1\x7e\x9f\xe2\x80\x5b\xfb\x82\xb9\x71\x11\xb5\x49\x93\x6e\x21\x1f\xfd\x58\x3b\x98\x21\xda\x91\x98\x99\x75\xc8\xdb\x87\x28\xe0\x78\x93\x22\x8d\x40\xd2\x9f\x1f\xe7\x55\x74\x4a\x78\x64\x3b\x4b\xe6\x81\x9a\xbc\xb0\xb9\x54\x4d\x38\xef\x87\x0d\x94\x66\xde\xf6\xd3\x1b\x65\xde\x16\x3a\x72\x71\x90\x4e\x20\xd5\x1a\x14\x52\xd5\x41\xc6\x70\x0e\x50\xc0\x16\x0d\x99\x79\xf0\xc6\x39\x0d\xc0\x06\xb9\x2c\x1e\x6c\x0f\x23\xde\xa4\x14\x1c\x19\xb4\x44\x9d\x29\x24\x53\x29\xef\x98\x49\xe9\xc4\xd3\xbf\x1e\x3b\x17\xce\x51\x0d\xe2\x3f\x45\xa0\x55\x0b\xff\x44\x77\x7d\x52\xc2\xa4\x3e\x00\x5f\x1f\x09\x87\xff\xfd\x12\x64\x27\x8e\xb1\x3f\x5d\x02\xab\x51\x73\x2d\x09\xcf\xf7\xe3\x1a\xd8\x45\x6e\x7f\x22\xdf\xd1\x05\x7a\xba\xbb\x86\x66\x0e\x93\x7c\xbd\xe6\x76\x7f\xb8\xf9\x45\xad\xb2\x15\xf5\x11\x00\x00\xff\xff\x6a\xd4\x1f\x50\x89\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 393, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x8c, 0x63, 0x29, 0x22, 0x87, 0x69, 0x74, 0x0, 0xa6, 0x70, 0x9b, 0x62, 0x49, 0x60, 0xf2, 0xd2, 0x7b, 0x68, 0x8, 0x93, 0x55, 0x97, 0xbb, 0x2, 0xe7, 0xd8, 0xb4, 0x19, 0xa, 0x81, 0x44}}
	return a, nil
}

var _assetsNodeResolverServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\xb6\xb0\xa5\xf3\x0c\x26\xf6\x64\xf8\x46\xa2\x0b\x13\xc0\x39\xbf\xcd\xb6\xef\x63\xae\x4c\x0f\xe4\xb6\x89\xfb\x9c\xf1\xf3\x1e\xb2\xec\x89\x2c\x0b\x67\xda\xb7\x71\xa2\x45\xa5\x85\x07\x91\xcb\x09\x26\x0f\xc5\x91\xa8\xf8\x6e\xe4\xa5\xb5\x64\x82\x29\x16\xbc\xde\xf6\xea\x43\xbd\xc6\x3f\x00\x00\xff\xff\x72\xbb\x64\x48\x5f\x00\x00\x00")

func assetsNodeResolverServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsNodeResolverServiceAccountYaml,
		"assets/node-resolver/service-account.yaml",
	)
}

func assetsNodeResolverServiceAccountYaml() (*asset, error) {
	bytes, err := assetsNodeResolverServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/node-resolver/service-account.yaml", size: 95, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0xc3, 0x84, 0x29, 0x3e, 0x8d, 0x36, 0xc3, 0x54, 0x6a, 0x36, 0x40, 0xa6, 0x71, 0x1b, 0x25, 0x6f, 0x72, 0x90, 0xc0, 0x94, 0x34, 0x64, 0xa8, 0x35, 0xc5, 0x5f, 0xe7, 0xbc, 0x41, 0xdb, 0xb4}}
	return a, nil
}

var _assetsNodeResolverUpdateNodeResolverSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x6f\xdb\x3a\x12\x7d\xd7\xaf\x38\x51\x8c\x26\x69\xab\x24\xc5\x16\x7d\x68\xea\xb6\xde\xc6\x41\x83\x36\xb1\x61\xbb\xdb\x87\xc0\x1b\xd0\xe4\xc8\xe2\x86\x26\x55\x92\x92\x6b\x24\xfe\xef\x0b\xea\xc3\x71\x3e\x70\x71\x1f\x6e\xfd\x60\x5b\xd4\x70\xe6\xcc\x99\x99\x43\xee\xee\x1c\xcd\xa4\x3e\x9a\x31\x97\x45\x8e\x3c\x92\xc2\x20\x97\x39\xa5\x4c\xaa\x28\xf2\x96\xe5\xd8\xfb\x9f\x99\x39\x24\x39\xee\xf0\x9b\xd9\xb9\xc3\x8d\x54\x0a\x77\x77\xf0\xb6\xa0\x13\x2c\x99\xf4\x27\xa0\xdf\xd2\xe3\x78\x0f\x93\xfe\xe8\x22\x8a\x06\xc3\xfe\xe5\xf8\xeb\xf9\xd9\xe4\xfa\xa2\x37\xfa\xd6\x1f\x75\x63\x93\x93\x76\x99\x4c\x7d\x32\x27\x4d\x96\x79\x12\x89\x36\x82\x12\x4b\xce\xa8\x92\x6c\x1c\x7d\x1d\x8c\x27\xe3\xeb\xb3\xf3\xef\xfd\x6e\x7c\x44\x9e\x1f\x65\xc6\x79\x17\x47\x93\xfe\xc5\xf0\xc9\xf2\xa1\x5f\xe4\x71\x14\x9d\x9f\x8d\xbb\x7b\xaf\xb1\x07\x4b\x4c\x20\xb1\x48\x18\x1c\xd9\x52\x72\x72\xf8\xf0\xe1\x03\xe2\xce\xed\xb8\x3f\xfa\xcf\xf9\x97\xfe\x78\x1d\x47\xd1\x2e\x2e\xd8\x0d\x81\xc1\xd3\x22\x37\x96\xd9\x15\x52\xa9\x08\x4b\xe9\x33\xf8\x8c\x60\x94\x40\x15\xa0\x5a\xdf\x73\x60\xde\x5b\x39\x2b\x3c\xb9\xc3\x48\xa6\xd8\x01\xcf\x91\xa4\x48\x92\xfb\x17\x89\xd1\x6a\x15\x22\xdd\x67\xb0\x8e\xc3\xf3\x06\xf9\x3a\x3e\x09\xde\x75\x04\x10\xcf\x0c\xe2\x33\x26\x15\x09\x78\x83\xdc\x52\x00\x4c\x5b\x51\x0f\xd1\xff\x2d\xbd\xd4\xf3\xc3\x38\x6c\x08\xcc\xbe\x89\x52\x19\x45\xcb\x2c\x60\xad\x69\x17\x26\x02\x04\x71\xc5\x2c\x21\xe9\xc1\x95\xfc\x5a\xe6\x2e\x02\x52\x63\xc3\x13\xa4\x0e\x18\x5a\x36\xae\x3e\x4f\x03\x8a\x6a\x1b\xb0\x8b\x33\xf2\x3c\x6b\xb9\xc2\xf9\x10\xa9\x35\x0b\x70\x55\x38\x4f\x16\x42\x3b\xc8\xb4\x06\xa7\xfd\x21\x7e\x12\x16\x81\x38\x47\x25\x59\xa6\xe0\xad\x24\xd7\x78\xf2\x06\xc2\x40\xfa\xf7\x38\x1f\x96\x6f\x5f\x87\xef\x77\xd5\xf7\x5b\x98\x92\x2c\x26\x5f\x86\x60\x5a\x54\xeb\x9b\x95\x43\x4c\x32\x82\x5f\x1a\x28\xe6\x3c\x8c\xde\xb8\x0b\xf9\x84\x14\x04\xe5\xca\xac\x16\xa4\xbd\xab\xcb\xf3\xad\xb0\x2b\x0b\xa3\x43\x8d\xc8\x62\x90\x93\x1e\x7b\xc6\x6f\xb0\x3f\x18\x0f\xdf\xfc\xeb\x00\x09\x7c\x66\x1c\x05\x34\xda\xf8\xc6\x9d\x2b\xf2\xdc\x58\x8f\x1f\xa7\x43\x28\xc3\xc4\x8c\x29\xa6\x39\x59\x57\x61\xb2\xf4\xab\x90\x96\x42\xfb\xf0\x4c\xea\x39\x4e\x2f\xc7\xf0\x99\x35\xc5\x3c\xab\x60\x56\x5e\xf8\x42\xb8\xee\xfe\x9e\x90\x73\x24\x1e\x3d\x7c\x8e\x3b\xb7\x97\xbd\x8b\x7e\xe8\xac\xfe\x68\x1d\xe3\x95\xcb\x42\x8c\x40\x77\xc9\xd7\x87\x9d\xdb\x2f\xdf\x7f\x8c\x27\xfd\xd1\xf5\xe9\xe0\xa2\x77\x7e\xb9\x8e\xef\xe6\x96\x72\x24\x25\xe2\xff\x9e\xc4\x7b\x95\xd3\xfa\xb3\x71\xda\xeb\xfd\x19\xbf\x78\xe5\x79\x8e\x57\x96\xbc\x5d\x75\x8f\xff\x18\xf4\x7f\x36\xca\x41\x15\x26\x74\x81\x0c\x6d\xdc\xb9\xdd\x09\x25\xb8\x7a\x39\x5d\x57\x2f\x9a\x26\x06\x64\xee\xba\xfb\x9d\x7d\x2a\x99\x0a\xbe\x2b\x23\x39\x5d\xc7\x07\x07\xad\x41\x8a\xab\x2b\xc4\x9d\x4f\x31\x12\xfa\x85\x63\xbc\x78\x11\x0c\x77\x65\x5e\x0f\x04\x12\x4d\x38\xc6\x74\xba\x99\xcf\xfa\xd3\x4c\xd3\x55\x03\x38\x9e\x76\xe3\xce\x6d\xbb\x69\x63\x35\xb3\xc4\x6e\x9a\xa7\x54\x36\xd0\x34\x45\xcd\x4f\x14\xfa\xef\x47\x2e\x98\x27\xdc\x2b\x17\x2a\xb5\x90\x29\x96\x84\x39\x79\x94\x4c\x49\xb1\x35\x88\xae\xda\xf6\x33\x68\x92\x52\xa1\x91\x51\x3c\x71\xb1\xcc\x48\x07\xc0\x96\x20\x1d\xb8\xb1\x14\x06\xb6\xf5\x61\x0a\xcf\xe6\x04\x63\xc1\x72\x89\x42\xb3\x92\x49\xc5\x66\x52\x49\xbf\xaa\x9c\x8f\x3d\x53\x04\xd2\xd5\x14\x83\x9b\x42\x89\x20\x33\xce\x07\xb2\xb7\xc2\xc8\xb4\xd2\xc4\xd6\xaf\x74\x10\xa4\xc8\x93\x88\x5a\x66\x13\xdd\xd4\xb4\x62\xeb\xe5\x34\x59\xc7\x0f\xc9\xdc\xc5\xbf\x0b\xa9\x04\x18\x34\x2d\xb7\x34\xae\x96\x9b\xed\x94\xc2\x88\x9b\xc2\x82\x17\xce\x9b\xc5\x06\x5d\x2a\x95\x27\x4b\x22\x64\x15\x35\x25\xdd\x81\x23\x81\x24\x71\x52\x91\xf6\x88\x8f\x76\xd1\xb9\x7d\x7c\xe6\xac\x8f\xc4\x09\x96\x78\xa0\xc2\x8f\x45\xfa\x41\xd5\x77\x31\x08\x95\xe1\x46\x7b\xa9\x8b\xa0\x09\xb3\x00\x3d\xa8\x42\x60\xa1\x86\xd9\xc2\x92\x29\x64\xa8\xa5\x95\x73\xa9\x99\xaa\x76\x05\x2c\xd2\x6d\x14\x5d\x34\x7e\x9d\x22\xca\xf1\xee\x18\x2f\xaa\xb3\xb2\x59\x6d\xc3\x44\x4d\xf3\x34\x6c\xf5\xf2\x9c\x2a\x5d\xaa\x4f\xc5\x7b\x1a\x82\xa8\x37\x52\x5e\x99\x5a\xde\x3d\xde\x4c\xc9\xbd\xdc\xef\xb4\xb5\x78\x20\xf7\xcd\x2c\xe5\xf5\x30\xb5\x26\x75\x6f\x4f\xd7\x5b\x66\xed\xf9\x14\x9a\x7d\x5d\x9b\xb6\x3f\x4f\x87\x16\xcf\xd2\x1e\xe3\xe3\xc7\x47\x87\x5f\xb8\x2c\x58\xde\xed\x7c\x6a\xa2\x34\x43\xb2\xf5\xa7\xee\xa6\x8e\xe5\xcf\x0f\xe4\xdf\xa4\xb0\xe1\x70\x32\x38\x1d\xbc\x7f\x66\xf0\x98\x37\x0b\xc9\x99\x52\xab\x70\x66\xb1\xd2\x48\x01\xa6\x57\x90\x9a\x1b\xed\xa4\xab\x0a\x38\xa3\x8c\x95\xd2\xd8\xc6\xd7\x88\x72\xc5\x38\x3d\xdb\xa9\x0b\x23\x64\x2a\x49\xa0\x24\xeb\xa4\xd1\x21\x0b\x4d\x24\x9a\xca\xf3\x45\xfe\x98\x87\xc7\x77\x84\xbb\xbb\xe6\x3a\xf1\xd7\x76\x6d\x5e\xad\x45\xe8\xb2\x20\x0c\x96\x16\xa6\xac\xaf\x11\x75\x36\xd5\x64\x71\x4b\xcc\xd3\x51\x3d\xaa\xd5\x29\x77\x7f\x55\x01\x37\xf9\x0a\x3c\x2b\x6c\xa0\xb6\xd2\xac\xa7\xdc\x16\x3a\xdc\x04\xdb\x0b\x45\x55\xa3\xff\x07\x00\x00\xff\xff\xfe\x0e\x6e\xec\x27\x0a\x00\x00")

func assetsNodeResolverUpdateNodeResolverShBytes() ([]byte, error) {
	return bindataRead(
		_assetsNodeResolverUpdateNodeResolverSh,
		"assets/node-resolver/update-node-resolver.sh",
	)
}

func assetsNodeResolverUpdateNodeResolverSh() (*asset, error) {
	bytes, err := assetsNodeResolverUpdateNodeResolverShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/node-resolver/update-node-resolver.sh", size: 2599, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xff, 0x26, 0xc, 0xb4, 0xb, 0x39, 0x93, 0x8e, 0x9e, 0x18, 0x49, 0x9b, 0x36, 0x36, 0x3f, 0x5a, 0xb2, 0x41, 0x98, 0x95, 0x8a, 0xbc, 0x49, 0x20, 0x1f, 0x98, 0x47, 0x2e, 0xe6, 0x6d, 0x1f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,

	"assets/node-resolver/service-account.yaml": assetsNodeResolverServiceAccountYaml,

	"assets/node-resolver/update-node-resolver.sh": assetsNodeResolverUpdateNodeResolverSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
		"node-resolver": {nil, map[string]*bintree{
			"service-account.yaml":    {assetsNodeResolverServiceAccountYaml, map[string]*bintree{}},
			"update-node-resolver.sh": {assetsNodeResolverUpdateNodeResolverSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
